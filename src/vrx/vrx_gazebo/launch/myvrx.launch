<?xml version="1.0"?>
<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_gazebo)/worlds/example_course.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace -->
  <arg name="namespace" default="wamv"/>

  <arg name="namespace1" default="wamv1"/>
   <arg name="namespace2" default="wamv2"/>
    <arg name="namespace3" default="wamv3"/>
     <arg name="namespace4" default="wamv4"/>
      <arg name="namespace5" default="wamv5"/>
  <!-- Do we lock the vessel to the world? -->
  <arg name="wamv_locked" default="false" />
  <!-- Start paused? -->
  <arg name="paused" default="false"/>
  <!-- Acoustic pinger position(s) -->
  <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml"/>

  <!-- <arg name="x" default="-172.28" />
  <arg name="y" default="217.273" />
  <arg name="z" default="0.1" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="-1.57" /> -->
  <arg name="P" default="0" />
  <arg name="R" default="0" />
<!-- Define arguments for each USV -->
  <!-- USV 0: 0° -->

  <arg name="x0" default="201.0"/>
  <arg name="y0" default="0.0"/>
  <arg name="z0" default="0.1"/>
  <arg name="Y0" default="3.1416"/> <!-- Facing center: atan2(0, -200) -->
  <!-- USV 1: 60° -->

  <arg name="x1" default="101.0"/>
  <arg name="y1" default="173.205"/>
  <arg name="z1" default="0.4"/>
  <arg name="Y1" default="4.1886"/> <!-- Facing center: atan2(-173.205, -100) -->
  <!-- USV 2: 120° -->

  <arg name="x2" default="-101.0"/>
  <arg name="y2" default="173.205"/>
  <arg name="z2" default="0.1"/>
  <arg name="Y2" default="-1.047"/> <!-- Facing center: atan2(-173.205, 100) -->
  <!-- USV 3: 180° -->

  <arg name="x3" default="-201.0"/>
  <arg name="y3" default="0.0"/>
  <arg name="z3" default="0.1"/>
  <arg name="Y3" default="0.0"/> <!-- Facing center: atan2(0, 200) -->
  <!-- USV 4: 240° -->

  <arg name="x4" default="-101.0"/>
  <arg name="y4" default="-173.205"/>
  <arg name="z4" default="0.1"/>
  <arg name="Y4" default="1.047"/> <!-- Facing center: atan2(173.205, 100) -->
  <!-- USV 5: 300° -->

  <arg name="x5" default="101.0"/>
  <arg name="y5" default="-173.205"/>
  <arg name="z5" default="0.1"/>
  <arg name="Y5" default="2.0946"/> <!-- Facing center: atan2(173.205, -100) -->

  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration -->
  <arg name="thrust_config" default="T" />

  <!-- Do we load the VRX sensor suite? -->
  <arg name="vrx_sensors_enabled" default="true" />

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)" />
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)"/>
  </include>

  <!-- Load robot model -->
  <!-- Determine which model -->
  <arg name="h_config" value="$(eval int((thrust_config)=='H'))"/>
  <arg name="t_config" value="$(eval int((thrust_config)=='T'))"/>
  <arg name="x_config" value="$(eval int((thrust_config)=='X'))"/>

  <!-- For now - can only use the T configuration! -->
  <arg if="$(arg t_config)" name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>

  <param name="$(arg namespace)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace) "/>

  <!-- Spawn USV1 in Gazebo -->
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x0) -y $(arg y0) -z $(arg z0)
              -R $(arg R) -P $(arg P) -Y $(arg Y0)
              -urdf -param $(arg namespace)/robot_description -model wamv"/>



  <node pkg="vrx_gazebo" type="twist2thrust.py" name="twist2thrust" output="screen">
    </node>

  <remap from="/wamv/robot_localization/odometry/filtered" to="/odom"/>
  <include file="$(find wamv_gazebo)/launch/localization_example.launch">
  </include>



  <param name="$(arg namespace1)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace1) "/>

  <!-- Spawn USV2 in Gazebo -->
  <node name="spawn_model1" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x1) -y $(arg y1) -z $(arg z1)
              -R $(arg R) -P $(arg P) -Y $(arg Y1)
              -urdf -param $(arg namespace1)/robot_description -model wamv1"/>

  <remap from="/wamv1/robot_localization/odometry/filtered" to="/odom1"/>
  <include file="$(find wamv_gazebo)/launch/localization_example1.launch">
  </include>


  <param name="$(arg namespace2)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace2) "/>

  <!-- Spawn USV3 in Gazebo -->
  <node name="spawn_model2" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x2) -y $(arg y2) -z $(arg z2)
              -R $(arg R) -P $(arg P) -Y $(arg Y2)
              -urdf -param $(arg namespace2)/robot_description -model wamv2"/>

  <remap from="/wamv2/robot_localization/odometry/filtered" to="/odom2"/>
  <include file="$(find wamv_gazebo)/launch/localization_example2.launch">
  </include>


    <param name="$(arg namespace3)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace3) "/>


  <node name="spawn_model3" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x3) -y $(arg y3) -z $(arg z3)
              -R $(arg R) -P $(arg P) -Y $(arg Y3)
              -urdf -param $(arg namespace3)/robot_description -model wamv3"/>

  <remap from="/wamv3/robot_localization/odometry/filtered" to="/odom3"/>
  <include file="$(find wamv_gazebo)/launch/localization_example3.launch">
  </include>

    <param name="$(arg namespace4)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace4) "/>


  <node name="spawn_model4" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x4) -y $(arg y4) -z $(arg z4)
              -R $(arg R) -P $(arg P) -Y $(arg Y4)
              -urdf -param $(arg namespace4)/robot_description -model wamv4"/>

  <remap from="/wamv4/robot_localization/odometry/filtered" to="/odom4"/>
  <include file="$(find wamv_gazebo)/launch/localization_example4.launch">
  </include>

  <param name="$(arg namespace5)/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace5) "/>

  <node name="spawn_model5" pkg="gazebo_ros" type="spawn_model"
        args="-x $(arg x5) -y $(arg y5) -z $(arg z5)
              -R $(arg R) -P $(arg P) -Y $(arg Y5)
              -urdf -param $(arg namespace5)/robot_description -model wamv5"/>

  <remap from="/wamv5/robot_localization/odometry/filtered" to="/odom5"/>
  <include file="$(find wamv_gazebo)/launch/localization_example5.launch">
  </include>

</launch>
